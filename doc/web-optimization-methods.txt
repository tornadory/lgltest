总结了一下，前端优化有几个方案
1.[极度重要] 使用CDN进行图片和css/js加载
2.[极度重要]js文件单页面加载不要超过7个，css不超过4个
3.避免不必要的404错误
4.使用js混淆时，注意一些在Google V8引擎上性能低的方法，字符串方面的操作。如果发现将其混淆过，手动换为未混淆的代码
5.使用Google 浏览器的性能检测工具查看各部分的加载耗时，页面本地加载优化到20ms之内。否则上线后网络会增加延时。
6.各种组件，例如轮播图。请等页面加载完毕20ms后再渲染，提升用户体验。
6.减少回调函数，避免回调地狱
7.如果只用jQuery的ajax方法，请抛弃jQuery。换用精简的axios。并用Promise进行接口分离式开发
7.JavaScript标签放在网页底部
8.避免js重复脚本。尽量少建立变量，耗费内存空间
9.避免css表达式，例如width=3*4px
10.移动端使用rem+flex布局
11.PC端使用固定宽度的布局，尽量不要使用自适应式的布局。兼容性差，代码维护不方便。最好的做法是做两套页面（PC+ Mobile）。然后用js去切换
12.减少http请求。做必要的加载错误提示和必要的loading框

前端开发，倡导组件化，接口分离式开发。最常用的就是ES6的新语法（export+import）方式进行方法引入和公共参数共用
轮播图，商品列表这些东西css自己写，js方面用滴滴前端工程师写的better-scroll进行滚动切换。

单页应用+router并不是未来。学会配置webpack的多页应用+单页应用混合开发。和嵌套路由
使用状态管理组建简化开发
使用服务端渲染，便于搜索引擎抓取和SEO优化
