<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>WebGL Sprite Atlas Demo</title>
  <style>
    body {
      width: 100%;
      height: 100%;
      border: 0px;
      padding: 0px;
      margin: 0px;
      background-color: white;
    }

    canvas {
      background-color: #FF0000;
    }

    canvas.invisible {
      display: none;
    }

    #controls {
      z-index: 2;
      position: absolute;
      left: 10px;
      bottom: 10px;
      background-color: #FFEE99;
      display: table;
    }

    #beat {
      display: table-cell;
      font-family: sans-serif;
      margin: 4px;
      padding: 4px;
      border-width: 1px;
      vertical-align: middle;
    }

    #viewContainer {
      width: 100%;
      height: 100%;
    }

    .fpsContainer {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 2;
      color: gray;
      font-family: sans-serif;
      background-color: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      padding: 10px;
    }

    .fps {
      color: white;
    }

    div.title {
      font-weight: bold;
    }
  </style>

  <link type="text/css" href="tdl/jquery-ui-1.css" rel="stylesheet">
  <script type="text/javascript" src="tdl/jquery-1.js"></script>
  <script type="text/javascript" src="tdl/jquery-ui-1.js"></script>

  <!--
<script type="text/javascript" src="http://benvanik.github.com/WebGL-Inspector/core/embed.js"></script>
-->

  <script type="text/javascript" src="tdl/base.js"></script>
  <script type="text/javascript" src="sprites/SpriteLibrary.js"></script>
  <script type="text/javascript" src="sprites/sprites.js"></script>

  <script id="spriteVertexShader" type="text/something-not-javascript">
uniform float u_frameOffset;

// Corrects for screen size.
uniform vec4 u_screenDims;

// Center of the sprite in screen coordinates
attribute vec2 centerPosition;

attribute float rotation;

// Per-sprite frame offset.
attribute float perSpriteFrameOffset;

// Sprite size in screen coordinates
attribute float spriteSize;

// Offset of this vertex's corner from the center, in normalized
// coordinates for the sprite. In other words:
//   (-0.5, -0.5) => Upper left corner
//   ( 0.5, -0.5) => Upper right corner
//   (-0.5,  0.5) => Lower left corner
//   ( 0.5,  0.5) => Lower right corner
attribute vec2 cornerOffset;

// Note: we currently assume that all sprite sheets start from the
// upper-left corner (which we define as (0,0)). Simply add another
// attribute float for the Y start of the sheet's upper left corner to
// add support for packing multiple sheets onto a single texture.

// Specified in normalized coordinates (0.0..1.0).
attribute vec2 spriteTextureSize;

attribute float spritesPerRow;
attribute float numFrames;

// For now we fix the number of textures the atlas can handle to 4.
// We could improve this by generating the shader code and passing
// down a varying array. Each element in this vec4 is either 0.0 or
// 1.0, with only one 1.0 entry, and essentially selects which texture
// will be displayed on the sprite.
attribute vec4 textureWeights;

// Output to the fragment shader.
varying vec2 v_texCoord;
varying vec4 v_textureWeights;

void main() {
  // Compute the frame number
  float frameNumber = mod(u_frameOffset + perSpriteFrameOffset, numFrames);
  // Compute the row
  float row = floor(frameNumber / spritesPerRow);
  // Compute the upper left texture coordinate of the sprite
  vec2 upperLeftTC = vec2(spriteTextureSize.x * (frameNumber - (row * spritesPerRow)),
                          spriteTextureSize.y * row);
  // Compute the texture coordinate of this vertex
  vec2 tc = upperLeftTC + spriteTextureSize * (cornerOffset + vec2(0.5, 0.5));
  v_texCoord = tc;
  v_textureWeights = textureWeights;

  float s = sin(rotation);
  float c = cos(rotation);
  mat2 rotMat = mat2(c, -s, s, c);
  vec2 scaledOffset = spriteSize * cornerOffset;
  vec2 pos = centerPosition + rotMat * scaledOffset;
  gl_Position = vec4(pos * u_screenDims.xy + u_screenDims.zw, 0.0, 1.0);
}
</script>
  <script id="spriteFragmentShader" type="text/something-not-javascript">
precision mediump float;

// Arrays of uniform samplers are currently problematic on some platforms.
// For now, convert them to individual uniforms.
uniform sampler2D u_texture0;
uniform sampler2D u_texture1;
uniform sampler2D u_texture2;
uniform sampler2D u_texture3;

varying vec2 v_texCoord;
varying vec4 v_textureWeights;

void main() {
  // Note: this fragment shader was originally written as:
  //  gl_FragColor = (texture2D(u_texture0, v_texCoord) * v_textureWeights.x +
  //                  texture2D(u_texture1, v_texCoord) * v_textureWeights.y +
  //                  texture2D(u_texture2, v_texCoord) * v_textureWeights.z +
  //                  texture2D(u_texture3, v_texCoord) * v_textureWeights.w);
  //
  // in order to avoid using the if-statement, under the supposition
  // that using branches would perform worse than a straight-line
  // statement. (Using an array of samplers is not an option for this
  // use case in OpenGL ES SL and therefore WebGL shaders.) It turns
  // out that at least on an NVIDIA GeForce 8000 series card, the
  // if-statements are massively faster, because the untaken texture
  // fetches can be eliminated, so a huge amount of texture bandwidth
  // is saved. Many thanks to Nat Duca for this suggestion.

  vec4 color;
  if (v_textureWeights.x > 0.0)
    color = texture2D(u_texture0, v_texCoord);
  else if (v_textureWeights.y > 0.0)
    color = texture2D(u_texture1, v_texCoord);
  else if (v_textureWeights.z > 0.0)
    color = texture2D(u_texture2, v_texCoord);
  else // v_textureWeights.w > 0.0
    color = texture2D(u_texture3, v_texCoord);
  gl_FragColor = color;
}
</script>
  <script id="slowSpriteFragmentShader" type="text/something-not-javascript">
// Slow variant of fragment shader for comparison purposes only.
precision mediump float;

// Arrays of uniform samplers are currently problematic on some platforms.
// For now, convert them to individual uniforms.
uniform sampler2D u_texture0;
uniform sampler2D u_texture1;
uniform sampler2D u_texture2;
uniform sampler2D u_texture3;

varying vec2 v_texCoord;
varying vec4 v_textureWeights;

void main() {
  gl_FragColor = (texture2D(u_texture0, v_texCoord) * v_textureWeights.x +
                  texture2D(u_texture1, v_texCoord) * v_textureWeights.y +
                  texture2D(u_texture2, v_texCoord) * v_textureWeights.z +
                  texture2D(u_texture3, v_texCoord) * v_textureWeights.w);
}
</script>
</head>

<body onload="init()" onresize="winresize()">
  <div class="fpsContainer" id="fpsContainer">
    <div class="fps">fps:
      <span id="fps">60</span>
    </div>
    <div id="topUI">
      <div>Number of Sprites</div>

    </div>
    <div>
      <a href="http://webglsamples.org/sprites/readme.html" style="color: #FFFFFF;">More info...</a>
    </div>
  </div>
  <div>
    <canvas id="canvas" width="1920" height="228"></canvas>
  </div>


</body>

</html>